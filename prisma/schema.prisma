// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String  @id @unique @default(uuid())
  name      String
  taxpayer  String?
  telephone String?
  email     String?
  address   String?
  location  String?

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(3)

  invoices Invoice[]

  @@map("customers")
}

model Product {
  id              String   @id @unique @default(uuid())
  name            String
  price           Decimal?
  unitMeasure     String?  @default("UN") @map("unit_measure")
  iva             Decimal?
  reasonExemption String?

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(3)

  invoices InvoiceProduct[]

  @@map("products")
}

enum WithholdingTaxType {
  COMPANY
  PARTICULAR
}

enum InvoiceStatus {
  N
  A
}

model Invoice {
  id     String @id @unique @default(uuid())
  number String @unique @db.VarChar(100)
  type   String @db.VarChar(5)

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id")

  currency                 String?             @default("AOA") @db.VarChar(5)
  exchange                 Decimal?            @default(0.00)
  date                     DateTime
  dueDate                  DateTime?           @map("due_Date")
  paymentTerms             String?             @map("payment_terms")
  reference                String?
  observation              String?
  withholdingTaxType       WithholdingTaxType?
  withholdingTaxPercentage Decimal?
  status                   InvoiceStatus?      @default(N)

  generalDiscount Decimal? @default(0.00) @map("general_discount")

  // Totais
  subtotal            Decimal? @default(0.00) @map("subtotal")
  totalIva            Decimal? @default(0.00) @map("total_iva")
  totalDiscount       Decimal? @default(0.00) @map("total_discount")
  totalWithholdingTax Decimal? @default(0.00) @map("total_withholding_tax")
  total               Decimal? @default(0.00)
  totalPaid           Decimal? @default(0.00) @map("total_paid")
  balance             Decimal? @default(0.00)

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(3)

  products  InvoiceProduct[]
  payments  InvoicePayment[]
  invoices  InvoiceDocument[] @relation(name: "documents_main_invoice")
  documents InvoiceDocument[] @relation(name: "document_invoices")
  taxes     InvoiceTax[]

  @@map("invoices")
}

model InvoiceProduct {
  id String @id @unique @default(uuid())

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @map("invoice_id")

  order           Int?     @default(1)
  productName     String   @map("product_name")
  unitMeasure     String?  @default("UN") @map("unit_measure")
  reasonExemption String?  @map("reason_exemption")
  price           Decimal  @default(0.00)
  quantity        Decimal  @default(0.00)
  discount        Decimal? @default(0.00)
  discountAmount  Decimal? @default(0.00)
  iva             Decimal? @default(0.00)
  ivaAmount       Decimal? @default(0.00)
  total           Decimal  @default(0.00)

  @@map("invoice_products")
}

model InvoicePayment {
  id String @id @unique @default(uuid())

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @map("invoice_id")

  date        DateTime
  method      String
  amount      Decimal
  observation String?

  @@map("invoice_payments")
}

model InvoiceTax {
  id String @id @unique @default(uuid())

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @map("invoice_id")

  value       Decimal @default(0.00) // Percentagem
  amount      Decimal @default(0.00) // Montante do imposto dos produtos aplicados com esse referido imposto  
  incidence   Decimal @default(0.00) // Total do imposto dos produtos aplicados com esse referido imposto 
  observation String? // if reasonExemption insert here

  @@map("invoice_taxes")
}

model InvoiceDocument {
  id String @id @unique @default(uuid())

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, name: "documents_main_invoice")
  invoiceId String  @map("invoice_id")

  document   Invoice @relation(fields: [documentId], references: [id], name: "document_invoices")
  documentId String  @map("document_id")

  paid Decimal @default(0.00)

  @@map("invoice_documents")
}

model Bank {
  id String @id @unique @default(uuid())

  name         String
  abbreviation String
  account      String
  iban         String?
  show         Boolean? @default(true)

  @@map("banks")
}

model Company {
  id String @id @unique @default(uuid())

  name      String
  slogan    String?
  telephone String?
  email     String?
  site      String?
  address   String?
  taxpayer  String?
  location  String?
  logo      String?

  @@map("companies")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  NORMAL
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String    @map("password_hash")
  emailVerified DateTime? @map("email_verified")
  picture       String?
  role          UserRole? @default(NORMAL)

  authenticators Authenticator[]
  accounts       Account[]
  sessions       Session[]
  emailAccounts  EmailAccount[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_publicKey")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model EmailAccount {
  id       String @id @default(cuid())
  email    String @unique
  password String

  users User[]

  @@map("email_accounts")
}
